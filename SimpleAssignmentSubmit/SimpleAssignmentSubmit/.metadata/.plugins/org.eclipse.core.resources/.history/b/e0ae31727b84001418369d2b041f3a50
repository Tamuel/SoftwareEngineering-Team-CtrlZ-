package GUIPanel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import Account.Account;
import Account.Professor;
import Account.Student;
import Assignment.Assignment;
import Assignment.Subject;
import GUIFrame.BulletinBoardFrame;
import GuiComponent.SimpleButton;

public class SubjectList extends JPanel{

	private Account account;
	private BulletinBoardFrame boardFrame;
	private TitleBar titleBar;
	private AssignmentList assignmentList;
	private Subject tempSubject;
	
	private ArrayList<SimpleButton> subjectButtons;
	private SimpleButton assignmentButton;
	private SimpleButton questionButton;

	private int subjectButtonHeight = 100;
	private int subjectButtonWidth = 200;
	private int xBorder = 10;
	private int yBorder = 10;
	private int height;
	
	private Color backgroundColor = new Color(245, 245, 245);
	private Color buttonColor = new Color(255, 255, 255);
	private Color fontColor = new Color(100, 100, 100);
	private Color clickColor = new Color(123, 170, 218);
	
	public SubjectList(int height, Account account, BulletinBoardFrame boardFrame, TitleBar titleBar) {
		subjectButtons = new ArrayList<SimpleButton>();
		this.boardFrame = boardFrame;
		this.titleBar = titleBar;
		this.account = account;
		
		this.setLayout(null);
		
		assignmentButton = new SimpleButton("과제", "게시판", subjectButtonHeight, subjectButtonWidth / 2);
		assignmentButton.setBackground(new Color(255, 255, 255, 100));
		assignmentButton.setFontColor(fontColor, fontColor);
		assignmentButton.setBorder(BorderFactory.createLineBorder(new Color(210, 210, 210), 1));
		assignmentButton.setLocation(-subjectButtonWidth, 0);
		
		questionButton = new SimpleButton("질문", "게시판", subjectButtonHeight, subjectButtonWidth / 2);
		questionButton.setBackground(new Color(255, 255, 255, 100));
		questionButton.setFontColor(fontColor, fontColor);
		questionButton.setBorder(BorderFactory.createLineBorder(new Color(210, 210, 210), 1));
		questionButton.setLocation(-subjectButtonWidth, 0);
		
		this.add(questionButton);
		this.add(assignmentButton);

		if(account.isStudent()) {
			// subjectButtons
			for(int i = 0; i < ((Student)account).getSubjects().size(); i++) {
				SimpleButton temp = new SimpleButton(((Student)account).getSubjects().get(i).getName(),
						((Student)account).getSubjects().get(i).getProfessor().getName() + " 교수님",
						subjectButtonWidth, subjectButtonHeight);
				temp.setLocation(xBorder, yBorder + (subjectButtonHeight + yBorder) * i);
				temp.addActionListener(new chooseListener());
				temp.setBackground(buttonColor);
				temp.setFontColor(fontColor, fontColor);
				temp.setBorder(BorderFactory.createLineBorder(new Color(210, 210, 210), 1));
				
				if(i == ((Student)account).getSubjects().size() - 1)
					height = temp.getY() + subjectButtonHeight + yBorder;

				subjectButtons.add(temp);
				this.addButton(subjectButtons.get(i));
			}				
			assignmentButton.addActionListener(new subjectButtonListener());
		}
		
		if(account.isProfessor()) {
			// subjectButton
			SimpleButton temp = new SimpleButton(((Professor)account).getSubject().getName(),
					subjectButtonWidth, subjectButtonHeight);
			temp.setLocation(xBorder, yBorder);
			temp.addActionListener(new chooseListener());
			temp.setBackground(buttonColor);
			temp.setForeground(fontColor);
			temp.setBorder(BorderFactory.createLineBorder(new Color(210, 210, 210), 1));

			assignmentButton.addActionListener(new subjectButtonListenerForProfessor());
			subjectButtons.add(temp);
			this.addButton(subjectButtons.get(0));
		}
		
		if(this.height > height)
			height = this.height;
		
		this.setSize(subjectButtonWidth + xBorder * 2, height);
		this.setPreferredSize(new Dimension(this.getWidth(), this.getHeight()));
		this.setBackground(backgroundColor);
		this.setBorder(null);
	}
	
	private class chooseListener implements ActionListener {
		public void actionPerformed(ActionEvent ev) {
			tempSubject = ev.getSource();
			assignmentButton.setLocation(((SimpleButton)ev.getSource()).getX(), ((SimpleButton)ev.getSource()).getY());
			questionButton.setLocation(assignmentButton.getX() + assignmentButton.getWidth(), ((SimpleButton)ev.getSource()).getY());
		}
	}

	private class subjectButtonListener implements ActionListener {
		public void actionPerformed(ActionEvent ev) {
			if(assignmentList != null) {
				assignmentList.removeAssignmentPanel();
				boardFrame.remove(assignmentList);
			}
			
			if(account.isStudent())
				assignmentList = new AssignmentList(thisHeight(),
						((Student)account).getSubjects().get(subjectButtons.indexOf((SimpleButton)ev.getSource())),
						boardFrame, titleBar);
			else if(account.isProfessor())
				assignmentList = new AssignmentList(thisHeight(),
						((Professor)account).getSubject(), boardFrame, titleBar);
//			assignmentList.setLocation(thisRight(), 30);
			titleBar.setPath(((Student)account).getSubjects().get(subjectButtons.indexOf((SimpleButton)ev.getSource())));
			boardFrame.addAssignmentPanel(assignmentList);
			boardFrame.repaint();
		}
	}
	
	private class subjectButtonListenerForProfessor implements ActionListener {
		public void actionPerformed(ActionEvent ev) {
			if(assignmentList != null) {
				assignmentList.removeAssignmentPanel();
				boardFrame.remove(assignmentList);
			}
			assignmentList = new AssignmentList(thisHeight(),
			((Professor)account).getSubject(), boardFrame, titleBar);
//			assignmentList.setLocation(thisRight(), 30);
			titleBar.setPath(((Professor)account).getSubject());
			boardFrame.addAssignmentPanel(assignmentList);
			boardFrame.repaint();
		}
	}

	public void addButton(SimpleButton button) {
		this.add(button);
	}

	public int thisRight() {
		return this.getX() + this.getWidth();
	}
	
	public int thisHeight() {
		return this.getHeight();
	}
}
