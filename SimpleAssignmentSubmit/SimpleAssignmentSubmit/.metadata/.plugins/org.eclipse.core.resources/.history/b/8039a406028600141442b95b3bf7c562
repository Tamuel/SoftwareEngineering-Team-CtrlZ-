package GUIFrame;

import Account.*;
import Assignment.Assignment;
import Assignment.Subject;
import GuiComponent.*;
import QnA.Question;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JTextField;

public class LoginFrame extends SimpleJFrame{
	
	private SimpleTextField idField;
	private SimpleTextField passwordField;
	
	static private Account accounts = new Account();
	
	private SimpleButton loginButton;
	private SimpleButton joinButton;

	private int componentHeight = 40;
	private int xBorder = 20;
	private int yBorder = 10;
	
	public LoginFrame(String frameName, int width, int height) {
		super(frameName, width, height);
		
		// Component 추가
		idField = new SimpleTextField("ID");
		idField.setSize(WIDTH - xBorder * 2, componentHeight);
		idField.setBackground(new Color(240, 240, 240));
		idField.setLocation(xBorder, componentHeight);
		
		passwordField = new SimpleTextField("Password");
		passwordField.setSize(WIDTH - xBorder * 2, componentHeight);
		passwordField.setBackground(new Color(240, 240, 240));
		passwordField.setLocation(xBorder, componentHeight * 2 + yBorder);
		
		Action listener = new Action();
		
		loginButton = new SimpleButton("Login");
		loginButton.setSize((WIDTH - xBorder *3) / 2, componentHeight);
		loginButton.setLocation(xBorder, componentHeight * 3 + yBorder * 2);
		loginButton.addActionListener(listener);
		
		joinButton = new SimpleButton("Join");
		joinButton.setSize((WIDTH - xBorder *3) / 2, componentHeight);
		joinButton.setLocation(xBorder * 2 + loginButton.getWidth(), loginButton.getY());
		joinButton.addActionListener(listener);
		
		this.add(idField);
		this.add(passwordField);
		this.add(loginButton);
		this.add(joinButton);
		
		this.getContentPane().setBackground(new Color(255, 255, 255));
		this.getRootPane().setBorder(BorderFactory.createLineBorder(new Color(220, 220, 220), 1));
	}
	
	private class Action implements ActionListener {
		public void actionPerformed(ActionEvent ev) {
			if(ev.getSource().equals(loginButton)) {
				Account temp;
				if((temp = accounts.searchAccount(idField.getText(), passwordField.getText())) != null) {
					makeBulletinBoard(temp);
					visible(false);
				}
			}
			else if(ev.getSource().equals(joinButton)) {
				MakeAccountFrame join = new MakeAccountFrame(accounts,"Join", 300, 275, getThis());
				visible(false);
			}
		}
	}
	
	public LoginFrame getThis() {
		return this;
	}
	
	public void visible (boolean bool) {
		this.setVisible(bool);
	}
	
	public void makeBulletinBoard(Account account) {
		BulletinBoardFrame board = new BulletinBoardFrame("과제 제출", 1100, 630, account);
	}

	public static void main(String args[]) {
		LoginFrame login = new LoginFrame("Login", 300, 200);
		
		// 객체 저장 (accounts 저장)
		FileOutputStream fos = null;
		ObjectOutputStream oos = null;

		// 파일로 부터 객체 데이터 읽어온다.
		FileInputStream fis = null;
		ObjectInputStream ois = null;
		
		// 저장된 account 들을 불러온다
		try{
			
			// accounts.dat 파일의 객체 아웃풋스트림을 생성한다.
			fos = new FileOutputStream("accounts.dat");
			oos = new ObjectOutputStream(fos);
			
		
		}catch(Exception e){
			
			e.printStackTrace();
		
		}finally{
			
			// 스트림을 닫아준다.
			if(fos != null) try{fos.close();}catch(IOException e){}
			if(oos != null) try{oos.close();}catch(IOException e){}	
		}
		
		
		// test 계좌
		Subject softwareDesign = new Subject("소프트웨어설계");
		Subject computerStructure = new Subject("컴퓨터구조");
		
		Professor professor1 = new Professor("bbbb", "1234", "최윤자", softwareDesign);
		Professor professor2 = new Professor("cccc", "1234", "김항준", computerStructure);
		Professor professor3 = new Professor("cccc", "1234", "김항준", computerStructure);
		Professor professor4 = new Professor("cccc", "1234", "김항준", computerStructure);
		Professor professor5 = new Professor("cccc", "1234", "김항준", computerStructure);
		Professor professor6 = new Professor("cccc", "1234", "김항준", computerStructure);
		Professor professor7 = new Professor("cccc", "1234", "김항준", computerStructure);
		
		Student student1 = new Student("student1", "1234", "홍길동");
		student1.addSubject(softwareDesign);
		student1.addSubject(computerStructure);
		
		Student student2 = new Student("student2", "1234", "심청");
		student2.addSubject(computerStructure);
		
		professor1.makeAssignment("과제1", "꼭 해오세요 \n 1 + 1 은 뭔가요?", "2014", "11", "29", "14");
		professor1.makeAssignment("과제2", "꼭 해오세요 \n 1 + 1 은 뭔가요?", "2014", "11", "30", "14");
		professor1.makeAssignment("과제3", "꼭 해오세요 \n 1 + 1 은 뭔가요?", "2014", "11", "15", "14");

		professor2.makeAssignment("과제4", "꼭 해오세요 \n 1 + 1 은 뭔가요?", "2014", "11", "16", "14");
		professor2.makeAssignment("과제5", "꼭 해오세요 \n 1 + 1 은 뭔가요?", "2014", "11", "18", "14");
		professor2.makeAssignment("과제6", "꼭 해오세요 \n 1 + 1 은 뭔가요?", "2014", "11", "21", "14");
		
		student1.submitAssignment(softwareDesign.getAssignments().get(0), new Assignment("과제 제출", "과제 내용", new Date()));
		student2.submitAssignment(softwareDesign.getAssignments().get(0), new Assignment("과제 제출2", "과제 내용2", new Date()));
		
		student1.makeQuestion(student1.getSubjects().get(0), "질문요!!!", "아무것도 모르겠습니다!");
		student2.makeQuestion(student2.getSubjects().get(0), "질문 있습니다", "질문요");
		
		professor1.assignmentApprasal("그것도 몰라 넌 0.1 점이야", "0.1", student1.getAssignments().get(0));
		
		student1.answerQuestion(student1.getQuestions().get(0), "답변 입니다");
		professor1.answerQuestion(student1.getQuestions().get(0), "답변 입니다");
		professor1.answerQuestion(student1.getQuestions().get(0), "답변 입니다");
		professor1.answerQuestion(student1.getQuestions().get(0), "답변 입니다\n하.. 된");
		professor2.answerQuestion(student1.getQuestions().get(0), "답변 입니다");
		professor1.answerQuestion(student1.getQuestions().get(0), "답변 입니다");
		professor2.answerQuestion(student1.getQuestions().get(0), "답변 입니다\n되라 제발 ㅠㅠ");
		professor1.answerQuestion(student1.getQuestions().get(0), "답변 입니다");
		professor1.answerQuestion(student1.getQuestions().get(0), "답변 입니다");
		professor1.answerQuestion(student1.getQuestions().get(0), "답변 입니다");
		
		accounts.addAccount(student1);
		accounts.addAccount(student2);
		accounts.addAccount(professor1);
		accounts.addAccount(professor2);
		accounts.addAccount(professor3);
		accounts.addAccount(professor4);
		accounts.addAccount(professor5);
		accounts.addAccount(professor6);
		accounts.addAccount(professor7);
	}
}
