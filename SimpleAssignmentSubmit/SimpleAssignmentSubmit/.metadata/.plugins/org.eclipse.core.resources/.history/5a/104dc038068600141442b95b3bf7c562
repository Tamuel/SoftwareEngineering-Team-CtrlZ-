package objectSave;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import Account.Account;

public class ObjectSaveSingleton {
	private static ObjectSaveSingleton singleton = null;

	static private Account accounts;
	
	private ObjectSaveSingleton()
	{
		if(!loadAccounts()) {
			accounts = new Account();
			System.out.println("새로운 account 객체를 만들었습니다");
		}
	}
	
	public void saveAccounts() {
		// 객체 저장 (accounts 저장)
		FileOutputStream fos = null;
		ObjectOutputStream oos = null;

		// 저장된 account 들을 불러온다
		try{
			
			// accounts.dat 파일의 객체 아웃풋스트림을 생성한다.
			fos = new FileOutputStream("accounts.dat");
			oos = new ObjectOutputStream(fos);
			
			oos.writeObject(accounts);
			System.out.println("account 를 저장하였습니다");
		}catch(Exception e){
			
			e.printStackTrace();
		
		}finally{
			
			// 스트림을 닫아준다.
			if(fos != null) try{fos.close();}catch(IOException e){}
			if(oos != null) try{oos.close();}catch(IOException e){}	
		}
	}
	
	public boolean loadAccounts() {
		FileInputStream fis = null;
		ObjectInputStream ois = null;
		
		try{
			fis = new FileInputStream("object.dat");
			ois = new ObjectInputStream(fis);
			
			accounts = (Account)ois.readObject();
		}catch(Exception e){
			System.err.println("해당하는 파일이 존재하지 않습니다");
			return false;
		}finally{
			if(fis != null) try{fis.close();}catch(IOException e){}
			if(ois != null) try{ois.close();}catch(IOException e){}
		}
		return true;
	}

	public static ObjectSaveSingleton getInstance()
	{ 
		if(singleton == null)
		{
			singleton  = new ObjectSaveSingleton();
		}
		return singleton;
	}
	
	public Account getAccounts() {
		return accounts;
	}
}
